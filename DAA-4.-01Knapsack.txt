import java.util.Scanner;

public class KnapsackDP {

    // Function to solve the 0-1 knapsack problem using dynamic programming
    public static int knapSack(int W, int[] weights, int[] values, int n) {
        // dp[i][w] will store the maximum value that can be attained with a knapsack of capacity w
        // and using the first i items.
        int[][] dp = new int[n + 1][W + 1];

        // Build the dp table in bottom-up manner
        for (int i = 0; i <= n; i++) {
            for (int w = 0; w <= W; w++) {
                if (i == 0 || w == 0) {
                    dp[i][w] = 0;  // No items or knapsack capacity is 0
                } else if (weights[i - 1] <= w) {
                    // If the current item can fit in the knapsack, check if including it gives a better value
                    dp[i][w] = Math.max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
                } else {
                    // If the current item cannot fit in the knapsack, exclude it
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        // The value at dp[n][W] is the maximum value we can achieve with the given items and knapsack capacity
        return dp[n][W];
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Take input for the number of items and the capacity of the knapsack
        System.out.println("Enter the number of items: ");
        int n = sc.nextInt();

        System.out.println("Enter the capacity of the knapsack: ");
        int W = sc.nextInt();

        int[] values = new int[n];
        int[] weights = new int[n];

        // Take input for the value and weight of each item
        for (int i = 0; i < n; i++) {
            System.out.println("Enter value and weight for item " + (i + 1) + ": ");
            values[i] = sc.nextInt();
            weights[i] = sc.nextInt();
        }

        // Call the knapsack function and display the maximum value
        int maxValue = knapSack(W, weights, values, n);
        System.out.println("The maximum value we can obtain is: " + maxValue);

        sc.close();
    }
}

/*Enter the number of items: 
4
Enter the capacity of the knapsack: 
5
Enter value and weight for item 1: 
1 2
Enter value and weight for item 2: 
2 3
Enter value and weight for item 3: 
3 4
Enter value and weight for item 4: 
8 6
*/